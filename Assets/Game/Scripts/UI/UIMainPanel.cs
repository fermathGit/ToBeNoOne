//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QFramework
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;
    
    
    public class UIMainPanelData : QFramework.UIPanelData
    {
    }
    
    public partial class UIMainPanel : QFramework.UIPanel
    {
        float unitHeight = 140f;

        int curMonthInValue = 0;
        int curMonthCoValue = 0;

        bool isAddNotHistory = true;
        int index = 0;

        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            throw new System.NotImplementedException ();
        }
        
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as UIMainPanelData ?? new UIMainPanelData();
            // please add init code here
        }
        
        protected override void OnOpen(QFramework.IUIData uiData)
        {
            InputNewData();
        }

        private void InputNewData() {
            isAddNotHistory = true;

            Step1.gameObject.SetActive( true );
            Step2.gameObject.SetActive( false );

            ResetInputUnits( UserDataManager.instance.InvestmentDisplays, InputFieldClone.gameObject, Input_Investment );
            ResetInputUnits( UserDataManager.instance.ConsumptionDisplays, InputFieldClone.gameObject, Input_Consumption );

            Input_Consumption.localPosition = Input_Investment.localPosition - new Vector3( 0, unitHeight * UserDataManager.instance.InvestmentDisplays.Count, 0 );

            FlushBtns();
        }

        void ShowHistory() {
            isAddNotHistory = false;

            Step1.gameObject.SetActive( true );
            Step2.gameObject.SetActive( true );

            FlushBtns();
            int count = UserDataManager.instance.MyDatas.Count;
            if ( count > 0 ) {
                index = count - 1;
                WzData lastData = UserDataManager.instance.MyDatas[index];
                LoadMyData( lastData );
            }
        }

        private void FlushBtns() {
            BtnGo.gameObject.SetActive( isAddNotHistory );
            BtnGo1.gameObject.SetActive( isAddNotHistory );
            BtnHistory.gameObject.SetActive( isAddNotHistory );
            BtnHistoryLast.gameObject.SetActive( !isAddNotHistory );
            BtnHistoryNext.gameObject.SetActive( !isAddNotHistory );
            BtnNew.gameObject.SetActive( !isAddNotHistory );
            BtnSave.gameObject.SetActive( isAddNotHistory );
        }

        protected override void RegisterUIEvent() {
            BtnGo1.onClick.AddListener( () => {
                if ( InputField_Income.text == "" || InputField_Rate.text == "" ) {
                    BtnGo1.gameObject.SetActive( false );
                    AnimSystem.UguiMove( InputField_Income.gameObject, null, InputField_Income.transform.transform.localPosition + new Vector3( 20, 0, 0 ), 0.2f, 0, InterpType.Default, false, RepeatType.PingPang );
                    AnimSystem.UguiMove( InputField_Rate.gameObject, null, InputField_Rate.transform.transform.localPosition + new Vector3( 20, 0, 0 ), 0.2f, 0, InterpType.Default, false, RepeatType.PingPang );

                    Timer.DelayCallBack( 0.8f, _ => {
                        AnimSystem.StopAnim( InputField_Income.gameObject );
                        AnimSystem.StopAnim( InputField_Rate.gameObject );
                        BtnGo1.gameObject.SetActive( true );
                    } );
                    return;
                }

                float income = float.Parse( InputField_Income.text );
                float rate = float.Parse( InputField_Rate.text ) / 100;
                curMonthInValue = (int)( income * rate );
                curMonthCoValue = (int)income - curMonthInValue;
                IncomeInValue.text = curMonthInValue.ToString();
                IncomeCoValue.text = curMonthCoValue.ToString();

                InputField_Income.interactable = true;
                InputField_Rate.interactable = true;

                Step1.gameObject.SetActive( true );
                Step2.gameObject.SetActive( true );
            } );

            BtnGo.onClick.AddListener( () => {
                float all = 0;
                float allIn = CalculateInputUnits( Input_Investment, ResultInvestment );
                float allCo = CalculateInputUnits( Input_Consumption, ResultConsumption );

                all = allIn + allCo;
                ResultAll.GetChild( 0 ).Find( "Text" ).GetComponent<Text>().text = all.ToString();

                int count = UserDataManager.instance.MyDatas.Count;
                if ( count > 0 ) {
                    //上月，盈亏
                    WzData lastData = UserDataManager.instance.MyDatas[count - 1];
                    float lastAllIn = lastData.result3;
                    ResultInvestment.GetChild( 1 ).Find( "Text" ).GetComponent<Text>().text = lastAllIn.ToString();
                    float diffIn = allIn - curMonthInValue - lastAllIn;
                    ResultInvestment.GetChild( 2 ).Find( "Text" ).GetComponent<Text>().text = diffIn.ToString();

                    float lastAllCo = lastData.result6;
                    ResultConsumption.GetChild( 1 ).Find( "Text" ).GetComponent<Text>().text = lastAllCo.ToString();
                    float diffCo = allCo - curMonthCoValue - lastAllCo;
                    ResultConsumption.GetChild( 2 ).Find( "Text" ).GetComponent<Text>().text = diffCo.ToString();

                    ResultAll.GetChild( 1 ).Find( "Text" ).GetComponent<Text>().text = ( all - lastData.result9 ).ToString();
                }

            } );

            BtnSave.onClick.AddListener( () => {
                SaveMyData();
                BtnSave.transform.Find( "Text" ).GetComponent<Text>().text = "保存成功";
                UserDataManager.instance.SaveUserData();
            } );

            BtnHistory.onClick.AddListener( () => { ShowHistory(); } );

            BtnHistoryLast.onClick.AddListener( () => {
                if ( index > 0 ) {
                    index--;
                    WzData data = UserDataManager.instance.MyDatas[index];
                    LoadMyData( data );
                }
            } );

            BtnHistoryNext.onClick.AddListener( () => {
                if ( index < UserDataManager.instance.MyDatas.Count - 1 ) {
                    index++;
                    WzData data = UserDataManager.instance.MyDatas[index];
                    LoadMyData( data );
                }
            } );

            BtnNew.onClick.AddListener( () => {
                InputNewData();
            } );

            BtnClear.onClick.AddListener( () => {
                UIMgr.OpenPanel<UIUserDataPanel>();
            } );
        }

        #region func
        private static void ResetInputUnits( List<string> list, GameObject clone, RectTransform parent ) {
            if ( parent.childCount > 0 ) {
                for ( int i = parent.childCount - 1; i >= 0; --i ) {
                    var temp = parent.GetChild( i ).gameObject;
                    Destroy( temp );
                }
            }

            for ( int i = 0; i < list.Count; ++i ) {
                GameObject go = Instantiate( clone );
                go.transform.SetParent( parent );
                go.transform.localScale = Vector3.one;

                //init
                go.transform.Find( "Name" ).GetComponent<Text>().text = list[i];
                go.transform.Find( "Text" ).GetComponent<Text>().text = "0";
            }
        }

        private float CalculateInputUnits( RectTransform parent, RectTransform resultParent ) {
            float all = 0;
            for ( int i = 0; i < parent.childCount; ++i ) {
                var temp = parent.GetChild( i ).GetComponent<InputField>();

                float getValue = GetInputTextValue( temp );

                all += getValue;
                Debug.Log( string.Format( "{0}:{1}", temp.transform.Find( "Name" ).GetComponent<Text>().text, getValue ) );
            }

            //总计
            resultParent.GetChild( 0 ).Find( "Text" ).GetComponent<Text>().text = all.ToString();
            return all;
        }

        public float GetInputTextValue( InputField temp ) {
            float ret = 0;
            string getValueString = temp.text;
            ret = getValueString.IsNullOrEmpty() ? 0 : float.Parse( getValueString );

            return ret;
        }

        public float GetInputTextValue( Text temp ) {
            float ret = 0;
            string getValueString = temp.text;
            ret = getValueString.IsNullOrEmpty() ? 0 : float.Parse( getValueString );

            return ret;
        }

        private void SaveMyData() {
            WzData data = new WzData();
            data.date = InputFieldDate.text;

            data.investmentDatas = new List<float>();
            for ( int i = 0; i < Input_Investment.childCount; ++i ) {
                var temp = Input_Investment.GetChild( i ).GetComponent<InputField>();
                float value = GetInputTextValue( temp );
                data.investmentDatas.Add( value );
            }

            data.consumptionDatas = new List<float>();
            for ( int i = 0; i < Input_Consumption.childCount; ++i ) {
                var temp = Input_Consumption.GetChild( i ).GetComponent<InputField>();
                float value = GetInputTextValue( temp );
                data.consumptionDatas.Add( value );
            }

            data.result1 = curMonthInValue;
            data.result2 = curMonthCoValue;
            data.result3 = GetInputTextValue( ResultInvestment.GetChild( 0 ).Find( "Text" ).GetComponent<Text>() );
            data.result4 = GetInputTextValue( ResultInvestment.GetChild( 1 ).Find( "Text" ).GetComponent<Text>() );
            data.result5 = GetInputTextValue( ResultInvestment.GetChild( 2 ).Find( "Text" ).GetComponent<Text>() );
            data.result6 = GetInputTextValue( ResultConsumption.GetChild( 0 ).Find( "Text" ).GetComponent<Text>() );
            data.result7 = GetInputTextValue( ResultConsumption.GetChild( 1 ).Find( "Text" ).GetComponent<Text>() );
            data.result8 = GetInputTextValue( ResultConsumption.GetChild( 2 ).Find( "Text" ).GetComponent<Text>() );
            data.result9 = GetInputTextValue( ResultAll.GetChild( 0 ).Find( "Text" ).GetComponent<Text>() );
            data.result10 = GetInputTextValue( ResultAll.GetChild( 1 ).Find( "Text" ).GetComponent<Text>() );
            data.result11 = GetInputTextValue( InputField_Income );
            data.result12 = GetInputTextValue( InputField_Rate );

            UserDataManager.instance.MyDatas.Add( data );
        }

        private void LoadMyData( WzData data ) {
            Debug.Log( "index:" + index );

            InputFieldDate.text = data.date.ToString();

            for ( int i = 0; i < Input_Investment.childCount; ++i ) {
                var temp = Input_Investment.GetChild( i ).GetComponent<InputField>();
                temp.text = data.investmentDatas[i].ToString();
            }
            for ( int i = 0; i < Input_Consumption.childCount; ++i ) {
                var temp = Input_Consumption.GetChild( i ).GetComponent<InputField>();
                temp.text = data.consumptionDatas[i].ToString();
            }
            IncomeInValue.text = data.result1.ToString();
            IncomeCoValue.text = data.result2.ToString();
            ResultInvestment.GetChild( 0 ).Find( "Text" ).GetComponent<Text>().text = data.result3.ToString();
            ResultInvestment.GetChild( 1 ).Find( "Text" ).GetComponent<Text>().text = data.result4.ToString();
            ResultInvestment.GetChild( 2 ).Find( "Text" ).GetComponent<Text>().text = data.result5.ToString();
            ResultConsumption.GetChild( 0 ).Find( "Text" ).GetComponent<Text>().text = data.result6.ToString();
            ResultConsumption.GetChild( 1 ).Find( "Text" ).GetComponent<Text>().text = data.result7.ToString();
            ResultConsumption.GetChild( 2 ).Find( "Text" ).GetComponent<Text>().text = data.result8.ToString();
            ResultAll.GetChild( 0 ).Find( "Text" ).GetComponent<Text>().text = data.result9.ToString();
            ResultAll.GetChild( 1 ).Find( "Text" ).GetComponent<Text>().text = data.result10.ToString();
            InputField_Income.text = data.result11.ToString();
            InputField_Rate.text = data.result12.ToString();
        }
        #endregion

        protected override void OnShow()
        {
        }
        
        protected override void OnHide()
        {
        }
        
        protected override void OnClose()
        {
        }
    }
}
